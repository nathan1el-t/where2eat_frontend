/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedProfileRouteImport } from './routes/_protected/profile'
import { Route as ProtectedPreferencesRouteImport } from './routes/_protected/preferences'
import { Route as ProtectedDiscoverRouteImport } from './routes/_protected/discover'
import { Route as ProtectedGroupIndexRouteImport } from './routes/_protected/group/index'
import { Route as ProtectedGroupJoinRouteImport } from './routes/_protected/group/join'
import { Route as ProtectedGroupCreateRouteImport } from './routes/_protected/group/create'
import { Route as ProtectedGroupIdIndexRouteImport } from './routes/_protected/group/$id/index'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedProfileRoute = ProtectedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedPreferencesRoute = ProtectedPreferencesRouteImport.update({
  id: '/preferences',
  path: '/preferences',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedDiscoverRoute = ProtectedDiscoverRouteImport.update({
  id: '/discover',
  path: '/discover',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedGroupIndexRoute = ProtectedGroupIndexRouteImport.update({
  id: '/group/',
  path: '/group/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedGroupJoinRoute = ProtectedGroupJoinRouteImport.update({
  id: '/group/join',
  path: '/group/join',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedGroupCreateRoute = ProtectedGroupCreateRouteImport.update({
  id: '/group/create',
  path: '/group/create',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedGroupIdIndexRoute = ProtectedGroupIdIndexRouteImport.update({
  id: '/group/$id/',
  path: '/group/$id/',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/discover': typeof ProtectedDiscoverRoute
  '/preferences': typeof ProtectedPreferencesRoute
  '/profile': typeof ProtectedProfileRoute
  '/group/create': typeof ProtectedGroupCreateRoute
  '/group/join': typeof ProtectedGroupJoinRoute
  '/group': typeof ProtectedGroupIndexRoute
  '/group/$id': typeof ProtectedGroupIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/discover': typeof ProtectedDiscoverRoute
  '/preferences': typeof ProtectedPreferencesRoute
  '/profile': typeof ProtectedProfileRoute
  '/group/create': typeof ProtectedGroupCreateRoute
  '/group/join': typeof ProtectedGroupJoinRoute
  '/group': typeof ProtectedGroupIndexRoute
  '/group/$id': typeof ProtectedGroupIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_protected/discover': typeof ProtectedDiscoverRoute
  '/_protected/preferences': typeof ProtectedPreferencesRoute
  '/_protected/profile': typeof ProtectedProfileRoute
  '/_protected/group/create': typeof ProtectedGroupCreateRoute
  '/_protected/group/join': typeof ProtectedGroupJoinRoute
  '/_protected/group/': typeof ProtectedGroupIndexRoute
  '/_protected/group/$id/': typeof ProtectedGroupIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/signup'
    | '/discover'
    | '/preferences'
    | '/profile'
    | '/group/create'
    | '/group/join'
    | '/group'
    | '/group/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/discover'
    | '/preferences'
    | '/profile'
    | '/group/create'
    | '/group/join'
    | '/group'
    | '/group/$id'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/login'
    | '/signup'
    | '/_protected/discover'
    | '/_protected/preferences'
    | '/_protected/profile'
    | '/_protected/group/create'
    | '/_protected/group/join'
    | '/_protected/group/'
    | '/_protected/group/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/profile': {
      id: '/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/preferences': {
      id: '/_protected/preferences'
      path: '/preferences'
      fullPath: '/preferences'
      preLoaderRoute: typeof ProtectedPreferencesRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/discover': {
      id: '/_protected/discover'
      path: '/discover'
      fullPath: '/discover'
      preLoaderRoute: typeof ProtectedDiscoverRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/group/': {
      id: '/_protected/group/'
      path: '/group'
      fullPath: '/group'
      preLoaderRoute: typeof ProtectedGroupIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/group/join': {
      id: '/_protected/group/join'
      path: '/group/join'
      fullPath: '/group/join'
      preLoaderRoute: typeof ProtectedGroupJoinRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/group/create': {
      id: '/_protected/group/create'
      path: '/group/create'
      fullPath: '/group/create'
      preLoaderRoute: typeof ProtectedGroupCreateRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/group/$id/': {
      id: '/_protected/group/$id/'
      path: '/group/$id'
      fullPath: '/group/$id'
      preLoaderRoute: typeof ProtectedGroupIdIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedDiscoverRoute: typeof ProtectedDiscoverRoute
  ProtectedPreferencesRoute: typeof ProtectedPreferencesRoute
  ProtectedProfileRoute: typeof ProtectedProfileRoute
  ProtectedGroupCreateRoute: typeof ProtectedGroupCreateRoute
  ProtectedGroupJoinRoute: typeof ProtectedGroupJoinRoute
  ProtectedGroupIndexRoute: typeof ProtectedGroupIndexRoute
  ProtectedGroupIdIndexRoute: typeof ProtectedGroupIdIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDiscoverRoute: ProtectedDiscoverRoute,
  ProtectedPreferencesRoute: ProtectedPreferencesRoute,
  ProtectedProfileRoute: ProtectedProfileRoute,
  ProtectedGroupCreateRoute: ProtectedGroupCreateRoute,
  ProtectedGroupJoinRoute: ProtectedGroupJoinRoute,
  ProtectedGroupIndexRoute: ProtectedGroupIndexRoute,
  ProtectedGroupIdIndexRoute: ProtectedGroupIdIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
